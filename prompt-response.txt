12: 45 pm

write a PHP application using a SQLite database to record time spent on various projects

-----------

Here’s a simple PHP application that uses SQLite to record time spent on various projects. It includes basic functionality for:

    Adding a new project

    Starting/stopping a timer for a project

    Viewing time logs

?? Directory Structure

time-tracker/
+-- index.php
+-- db.php
+-- start.php
+-- stop.php
+-- view.php
+-- database.sqlite (auto-created)

?? db.php – Database connection and schema setup

<?php
// db.php

$db = new PDO('sqlite:database.sqlite');
$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

// Create tables if not exists
$db->exec("
    CREATE TABLE IF NOT EXISTS projects (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL
    );

    CREATE TABLE IF NOT EXISTS time_logs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        project_id INTEGER,
        start_time TEXT,
        end_time TEXT,
        FOREIGN KEY(project_id) REFERENCES projects(id)
    );
");
?>

?? index.php – Main interface

<?php require 'db.php'; ?>
<!DOCTYPE html>
<html>
<head>
    <title>Time Tracker</title>
</head>
<body>
    <h1>Project Time Tracker</h1>

    <form action="index.php" method="POST">
        <input type="text" name="project_name" placeholder="New Project Name" required>
        <button type="submit" name="add_project">Add Project</button>
    </form>

    <h2>Projects</h2>
    <ul>
    <?php
    if (isset($_POST['add_project'])) {
        $stmt = $db->prepare("INSERT INTO projects (name) VALUES (?)");
        $stmt->execute([$_POST['project_name']]);
    }

    $projects = $db->query("SELECT * FROM projects");
    foreach ($projects as $project):
    ?>
        <li>
            <?= htmlspecialchars($project['name']) ?>
            <form action="start.php" method="POST" style="display:inline;">
                <input type="hidden" name="project_id" value="<?= $project['id'] ?>">
                <button type="submit">Start</button>
            </form>
            <form action="stop.php" method="POST" style="display:inline;">
                <input type="hidden" name="project_id" value="<?= $project['id'] ?>">
                <button type="submit">Stop</button>
            </form>
        </li>
    <?php endforeach; ?>
    </ul>

    <a href="view.php">View Time Logs</a>
</body>
</html>

?? start.php – Start tracking time

<?php
require 'db.php';

$project_id = $_POST['project_id'];
$now = date('Y-m-d H:i:s');

// Check if there's already a running timer
$stmt = $db->prepare("SELECT * FROM time_logs WHERE project_id = ? AND end_time IS NULL");
$stmt->execute([$project_id]);
if (!$stmt->fetch()) {
    $stmt = $db->prepare("INSERT INTO time_logs (project_id, start_time) VALUES (?, ?)");
    $stmt->execute([$project_id, $now]);
}

header('Location: index.php');
exit;

?? stop.php – Stop tracking time

<?php
require 'db.php';

$project_id = $_POST['project_id'];
$now = date('Y-m-d H:i:s');

$stmt = $db->prepare("UPDATE time_logs SET end_time = ? WHERE project_id = ? AND end_time IS NULL");
$stmt->execute([$now, $project_id]);

header('Location: index.php');
exit;

?? view.php – View time logs

<?php
require 'db.php';

$logs = $db->query("
    SELECT p.name as project_name, l.start_time, l.end_time
    FROM time_logs l
    JOIN projects p ON p.id = l.project_id
    ORDER BY l.start_time DESC
");
?>
<!DOCTYPE html>
<html>
<head>
    <title>Time Logs</title>
</head>
<body>
    <h1>Time Logs</h1>
    <table border="1" cellpadding="5">
        <tr>
            <th>Project</th>
            <th>Start Time</th>
            <th>End Time</th>
            <th>Duration</th>
        </tr>
        <?php foreach ($logs as $log): 
            $duration = '';
            if ($log['end_time']) {
                $start = strtotime($log['start_time']);
                $end = strtotime($log['end_time']);
                $seconds = $end - $start;
                $duration = gmdate("H:i:s", $seconds);
            } else {
                $duration = 'In Progress';
            }
        ?>
        <tr>
            <td><?= htmlspecialchars($log['project_name']) ?></td>
            <td><?= $log['start_time'] ?></td>
            <td><?= $log['end_time'] ?? '...' ?></td>
            <td><?= $duration ?></td>
        </tr>
        <?php endforeach; ?>
    </table>
    <br>
    <a href="index.php">? Back</a>
</body>
</html>

? Requirements

    PHP 7.4+

    SQLite PDO extension enabled

Would you like me to package this as a .zip file or turn it into a more advanced web app (e.g., with JavaScript or a REST API)?
You said:
include REST API
ChatGPT said:

Great! Let’s expand the app to include a RESTful API for recording time spent on projects. This will allow you to interact with the time tracker programmatically (e.g., from mobile apps, CLI tools, or other services).
?? Features of the REST API

    GET /api/projects – List all projects

    POST /api/projects – Create a new project

    POST /api/start – Start tracking time for a project

    POST /api/stop – Stop tracking time for a project

    GET /api/logs – View time logs

?? Updated Project Structure

time-tracker/
+-- index.php
+-- db.php
+-- api/
¦   +-- index.php
¦   +-- projects.php
¦   +-- start.php
¦   +-- stop.php
¦   +-- logs.php
+-- database.sqlite

?? api/index.php – API Router

<?php
$request = $_SERVER['REQUEST_URI'];

switch (true) {
    case preg_match('/\/api\/projects$/', $request):
        require 'projects.php';
        break;
    case preg_match('/\/api\/start$/', $request):
        require 'start.php';
        break;
    case preg_match('/\/api\/stop$/', $request):
        require 'stop.php';
        break;
    case preg_match('/\/api\/logs$/', $request):
        require 'logs.php';
        break;
    default:
        http_response_code(404);
        echo json_encode(['error' => 'Endpoint not found']);
}

?? Common Setup (db.php and headers)

At the top of each API file, include:

<?php
require_once '../db.php';
header('Content-Type: application/json');

?? api/projects.php

<?php
require_once '../db.php';
header('Content-Type: application/json');

switch ($_SERVER['REQUEST_METHOD']) {
    case 'GET':
        $projects = $db->query("SELECT * FROM projects")->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($projects);
        break;

    case 'POST':
        $data = json_decode(file_get_contents("php://input"), true);
        if (!isset($data['name'])) {
            http_response_code(400);
            echo json_encode(['error' => 'Project name required']);
            exit;
        }

        $stmt = $db->prepare("INSERT INTO projects (name) VALUES (?)");
        $stmt->execute([$data['name']]);
        echo json_encode(['success' => true, 'id' => $db->lastInsertId()]);
        break;

    default:
        http_response_code(405);
        echo json_encode(['error' => 'Method not allowed']);
}

?? api/start.php

<?php
require_once '../db.php';
header('Content-Type: application/json');

if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['error' => 'Method not allowed']);
    exit;
}

$data = json_decode(file_get_contents("php://input"), true);
$project_id = $data['project_id'] ?? null;

if (!$project_id) {
    http_response_code(400);
    echo json_encode(['error' => 'Project ID required']);
    exit;
}

// Prevent duplicate running logs
$stmt = $db->prepare("SELECT * FROM time_logs WHERE project_id = ? AND end_time IS NULL");
$stmt->execute([$project_id]);
if ($stmt->fetch()) {
    echo json_encode(['message' => 'Timer already running']);
    exit;
}

$now = date('Y-m-d H:i:s');
$stmt = $db->prepare("INSERT INTO time_logs (project_id, start_time) VALUES (?, ?)");
$stmt->execute([$project_id, $now]);

echo json_encode(['success' => true]);

?? api/stop.php

<?php
require_once '../db.php';
header('Content-Type: application/json');

if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['error' => 'Method not allowed']);
    exit;
}

$data = json_decode(file_get_contents("php://input"), true);
$project_id = $data['project_id'] ?? null;

if (!$project_id) {
    http_response_code(400);
    echo json_encode(['error' => 'Project ID required']);
    exit;
}

$now = date('Y-m-d H:i:s');
$stmt = $db->prepare("UPDATE time_logs SET end_time = ? WHERE project_id = ? AND end_time IS NULL");
$stmt->execute([$now, $project_id]);

echo json_encode(['success' => true]);

?? api/logs.php

<?php
require_once '../db.php';
header('Content-Type: application/json');

$logs = $db->query("
    SELECT p.name AS project_name, l.start_time, l.end_time
    FROM time_logs l
    JOIN projects p ON l.project_id = p.id
    ORDER BY l.start_time DESC
")->fetchAll(PDO::FETCH_ASSOC);

foreach ($logs as &$log) {
    if ($log['end_time']) {
        $duration = strtotime($log['end_time']) - strtotime($log['start_time']);
        $log['duration'] = gmdate('H:i:s', $duration);
    } else {
        $log['duration'] = 'In Progress';
    }
}

echo json_encode($logs);

? Example API Usage (with curl)

    Add a project

curl -X POST -H "Content-Type: application/json" -d '{"name":"My Project"}' http://localhost/api/projects

Start a timer

curl -X POST -H "Content-Type: application/json" -d '{"project_id":1}' http://localhost/api/start

Stop a timer

curl -X POST -H "Content-Type: application/json" -d '{"project_id":1}' http://localhost/api/stop

View logs

    curl http://localhost/api/logs

Would you like authentication (e.g., API keys or token-based login) added next?
You said:
no. please provide zip file
ChatGPT said:

I can't create a .zip file directly within this chat interface, but I can guide you on how to package the files.

    Create the directory structure on your local machine:

time-tracker/
+-- index.php
+-- db.php
+-- api/
¦   +-- index.php
¦   +-- projects.php
¦   +-- start.php
¦   +-- stop.php
¦   +-- logs.php
+-- database.sqlite (auto-created)

Copy the code I’ve provided for each file into the corresponding files in your project structure.

Create the .zip file:

    Once your files are set up, you can easily zip the folder with the following steps:

    Windows: Right-click the time-tracker folder ? Select Send to ? Compressed (zipped) folder.

    macOS/Linux: Use zip command in the terminal:

    zip -r time-tracker.zip time-tracker/

Testing: Once you unzip the folder, start a local PHP server to test the application:

    php -S localhost:8000

Now, you should have a working PHP application that includes both a front-end and REST API for tracking time spent on projects!

Let me know if you need further help setting this up!